/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Dispatch } from "./Dispatch";
import { DispatchCountArgs } from "./DispatchCountArgs";
import { DispatchFindManyArgs } from "./DispatchFindManyArgs";
import { DispatchFindUniqueArgs } from "./DispatchFindUniqueArgs";
import { DeleteDispatchArgs } from "./DeleteDispatchArgs";
import { DispatchService } from "../dispatch.service";
@graphql.Resolver(() => Dispatch)
export class DispatchResolverBase {
  constructor(protected readonly service: DispatchService) {}

  async _dispatchesMeta(
    @graphql.Args() args: DispatchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Dispatch])
  async dispatches(
    @graphql.Args() args: DispatchFindManyArgs
  ): Promise<Dispatch[]> {
    return this.service.dispatches(args);
  }

  @graphql.Query(() => Dispatch, { nullable: true })
  async dispatch(
    @graphql.Args() args: DispatchFindUniqueArgs
  ): Promise<Dispatch | null> {
    const result = await this.service.dispatch(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Dispatch)
  async deleteDispatch(
    @graphql.Args() args: DeleteDispatchArgs
  ): Promise<Dispatch | null> {
    try {
      return await this.service.deleteDispatch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
