/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DispatchService } from "../dispatch.service";
import { DispatchCreateInput } from "./DispatchCreateInput";
import { Dispatch } from "./Dispatch";
import { DispatchFindManyArgs } from "./DispatchFindManyArgs";
import { DispatchWhereUniqueInput } from "./DispatchWhereUniqueInput";
import { DispatchUpdateInput } from "./DispatchUpdateInput";

export class DispatchControllerBase {
  constructor(protected readonly service: DispatchService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dispatch })
  async createDispatch(
    @common.Body() data: DispatchCreateInput
  ): Promise<Dispatch> {
    return await this.service.createDispatch({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dispatch] })
  @ApiNestedQuery(DispatchFindManyArgs)
  async dispatches(@common.Req() request: Request): Promise<Dispatch[]> {
    const args = plainToClass(DispatchFindManyArgs, request.query);
    return this.service.dispatches({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dispatch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dispatch(
    @common.Param() params: DispatchWhereUniqueInput
  ): Promise<Dispatch | null> {
    const result = await this.service.dispatch({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dispatch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDispatch(
    @common.Param() params: DispatchWhereUniqueInput,
    @common.Body() data: DispatchUpdateInput
  ): Promise<Dispatch | null> {
    try {
      return await this.service.updateDispatch({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dispatch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDispatch(
    @common.Param() params: DispatchWhereUniqueInput
  ): Promise<Dispatch | null> {
    try {
      return await this.service.deleteDispatch({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
